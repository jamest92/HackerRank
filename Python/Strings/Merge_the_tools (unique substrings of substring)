Consider the following:

A string, s, of length n
An integer, k , where k is a factor of n.
We can split  s into n/k substrings where each subtring, t , consists of a contiguous block of k characters in s. Then, use each t to create string z such that:

The characters in z are a subsequence of the characters in t .
Any repeat occurrence of a character is removed from the string such that each character in z occurs exactly once. 

Example
string = 'AABCAAADA'
k = 3
There are three substrings of length  to consider: 'AAA', 'BCA' and 'DDE'. The first substring is all 'A' characters, so z = 'A' . 
The second substring has all distinct characters, so z2 = 'BCA'. 
The third substring has 2 different characters, so z3 = 'DE'. 
Note that a subsequence maintains the original order of characters encountered. 
The order of characters in each subsequence shown is important.

Complete the merge_the_tools function in the editor below.

merge_the_tools has the following parameters:

string s: the string to analyze
int k: the size of substrings to analyze
Prints

Print each subsequence on a new line. There will be n/k of them. No return value is expected.


Solution:
def merge_the_tools(string, k):
    # your code goes here
    for i in range(0, len(string), k):
        unique = ""
        for c in string[i: i+k]:    
            if c not in unique:
                unique+= c
        print(unique)
        
 if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)
    
